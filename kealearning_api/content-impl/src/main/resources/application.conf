play.application.loader = co.edu.eafit.dis.content.impl.ContentLoader

content.cassandra.keyspace = content

cassandra-journal.keyspace = ${content.cassandra.keyspace}
cassandra-snapshot-store.keyspace = ${content.cassandra.keyspace}
lagom.persistence.read-side.cassandra.keyspace = ${content.cassandra.keyspace}


# The properties below override Lagom default configuration with the recommended values for new projects.
#
# Lagom has not yet made these settings the defaults for backward-compatibility reasons.

# Prefer 'ddata' over 'persistence' to share cluster sharding state for new projects.
# See https://doc.akka.io/docs/akka/current/cluster-sharding.html#distributed-data-vs-persistence-mode
akka.cluster.sharding.state-store-mode = ddata


lagom.persistence.read-side {

  # how long should we wait when retrieving the last known offset
  offset-timeout = 5s

  # Exponential backoff for failures in ReadSideProcessor
  failure-exponential-backoff {
    # minimum (initial) duration until processor is started again
    # after failure
    min = 3s

    # the exponential back-off is capped to this duration
    max = 30s

    # additional random delay is based on this factor
    random-factor = 0.2
  }

  # The amount of time that a node should wait for the global prepare callback to execute
  global-prepare-timeout = 20s

  # Specifies that the read side processors should run on cluster nodes with a specific role.
  # If the role is not specified (or empty) all nodes in the cluster are used.
  run-on-role = ""

  # The Akka dispatcher to use for read-side actors and tasks.
  use-dispatcher = "lagom.persistence.dispatcher"
}

play.filters.cors {
  pathPrefixes = ["/"]
  allowedOrigins = null # Accepts all origins
  allowedHttpMethods = null # Accepts all methods
  allowedHttpHeaders = null # Accepts all headers
  preflightMaxAge = 10 seconds
}